<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cannot_convert_from_0_to_1" xml:space="preserve">
    <value>Cannot convert from type {0} to type {1}.</value>
  </data>
  <data name="cannot_figure_out_how_to_deserialize" xml:space="preserve">
    <value>Cannot figure out how to deserialize web response.</value>
  </data>
  <data name="content_encoding_is_not_supported" xml:space="preserve">
    <value>The content encoding is not supported by the platform.</value>
  </data>
  <data name="default_credentials_are_not_supported" xml:space="preserve">
    <value>CredentialType.DefaultCredentials is not supported in the platform.</value>
  </data>
  <data name="default_network_credentials_are_not_supported1" xml:space="preserve">
    <value>CredentialType.DefaultNetworkCredentials is not supported in the platform.</value>
  </data>
  <data name="failed_create_url" xml:space="preserve">
    <value>Failed to create Url {0}.</value>
  </data>
  <data name="failed_execute_request" xml:space="preserve">
    <value>Failed to execute request with base URL {0} for type ({1})</value>
  </data>
  <data name="input_argument_can_be_only_string_or_guid" xml:space="preserve">
    <value>Input argument can be only of string or Guid type.</value>
  </data>
  <data name="invalid_header_character" xml:space="preserve">
    <value>"Invalid character '{0}' in {1}.</value>
  </data>
  <data name="malformed_content_type" xml:space="preserve">
    <value>Malformed content type {0}.</value>
  </data>
  <data name="malformed_header" xml:space="preserve">
    <value>Malformed header {0}.</value>
  </data>
  <data name="more_than_one_icredntials_property" xml:space="preserve">
    <value>The platform does not support more than one ICredentials property in the input model.</value>
  </data>
  <data name="null_response_stream" xml:space="preserve">
    <value>Response stream is null.</value>
  </data>
  <data name="object_must_be_of_string_byte_array_or_stream_type" xml:space="preserve">
    <value>The object {0} must be either string or byte[] or Stream or simple type (e.g. int, double, etc.).</value>
  </data>
  <data name="separated_coll_attr_cannot_be_used_for_0_in_1" xml:space="preserve">
    <value>SeparatedCollectionConverterAttribute cannot be used for property {0} in {1}.</value>
  </data>
  <data name="service_url_is_not_defined" xml:space="preserve">
    <value>The Service URL is neither defined in the constructor nor in the configuration file.</value>
  </data>
  <data name="the_value_must_be_of_stream_type" xml:space="preserve">
    <value>The value must be of Stream type but is {0}.</value>
  </data>
  <data name="type_0_cannot_be_converted_to_byte_array" xml:space="preserve">
    <value>Type {0} cannot be converted to byte array.</value>
  </data>
  <data name="unknown_underlying_enum_type_0" xml:space="preserve">
    <value>Unknown underlying enum type {0}.</value>
  </data>
  <data name="value_0_is_not_defined_for_enum_1" xml:space="preserve">
    <value>Value {0} is not defined for enum {1}.</value>
  </data>
  <data name="will_try_again" xml:space="preserve">
    <value>Failed to execute the service query, will try again. Attempt {0} out of {1} : {2}</value>
  </data>
</root>